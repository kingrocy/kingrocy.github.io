<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[mysql开启远程连接服务]]></title>
      <url>http://yoursite.com/2017/07/02/mysql%E5%BC%80%E5%90%AF%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1/</url>
      <content type="html"><![CDATA[<p>这几天在linux上部署我的项目，项目数据库配置的是我windows下面的数据库。但是项目跑起来却无法连接上数据库。后来发现原来是mysql没有开启远程连接服务，不能根据本地ip来连接。先给出解决方法：</p>
<pre><code>1、打开cmd，进入mysql安装目录下的bin文件夹

2、用root用户登录 mysql -u root -p 再输入密码

3、打开远程登录的权限   
    grant all privileges on *.* to root@&quot;%&quot; identified by &apos;password&apos; with grant option;

4、刷新权限  flush privileges;
</code></pre>]]></content>
      
        <categories>
            
            <category> 数据库 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux搭建web环境]]></title>
      <url>http://yoursite.com/2017/06/17/linux%E4%B8%8B%E6%90%AD%E5%BB%BAweb%E7%8E%AF%E5%A2%83/</url>
      <content type="html"><![CDATA[<p>linux上开发环境搭建较为麻烦，现对于常用的一些环境进行搭建与记录，方便日后进行查看。</p>
<p>在这之前，先介绍一下vim的使用</p>
<pre><code>1、首先vim打开一个文件，当需要对文件进行修改时，按I键，即可进入“插入状态”  然后就可对文件进行操作


2、当对文件改动完成之后，有以下几个操作：

     1、保存退出  先按ESC 再按： 再按 w(write) q(quit) 或者先按 ESC 再按： 再按 x  

                    （ x 相当于 w q ）

     2、不保存退出  先按ESC 再按： 再按 q！

     3、正常退出（当文件没有被修改时才可使用） 先按ESC 再按： 再按 q
</code></pre><p><strong>1、jdk的安装配置</strong></p>
<p><strong>2、tomcat的安装配置</strong></p>
<pre><code>1、从网上下载tomcat linux的安装包 如：apache-tomcat-7.0.79.tar.gz
2、通过Xftp 将此安装包复制到linux下的指定位置上
3、 cd /usr/local/server/
    tar -zxvf  /usr/local/server/apache-tomcat-7.0.79.tar.gz
4、进入tomcat的bin目录下，启动tomcat  ./startup.sh
5、进入tomcat的网址看看tomcat是否已经成功启动

注意事项：tomcat启动后，却访问不了主页。是因为linux的防火墙没有关，将防火墙关闭就可以了。
关闭防火墙命令：/sbin/service iptables stop
(关闭防火墙需要root用户来关闭，，普通用户关闭不了。。。而且关闭防火墙重启失效，。。。。)


备注：linux防火墙有两种方式开关闭。

     第一种：重启后生效
            开启： chkconfig iptables on
            关闭： chkconfig iptables off 

      第二种：即时生效，重启后失效
            开启： service iptables start
            关闭： service iptables stop
</code></pre><p><strong>3、mysql的安装配置</strong></p>
<p><strong>4、redis的安装配置</strong></p>
<pre><code>1、下载redis  并解压  tar -zxvf redis-3.2.9.tar.gz  我是将redis解压到/usr/local/server/redis-3.2.9

2、在redis解压目录下 分别执行 make 、 make install命令

3、在前两个步骤下，redis已经安装成功了； 

  在这里说两个东西  /usr/local/bin 这个目录下存放了linux安装的一些程序的启动文件 redis的启动需要进入此目录下

  在启动redis的时候 我们需要指定redis.conf

  一般我们需要拷贝一份redis.conf 然后改动这个redis.conf文件 通过此文件来启动redis

4、启动redis

   进入/usr/local/bin 执行 redis-server /myredis/redis.conf来启动redis

5、启动好redis之后，想进入redis

   执行 redis-cli -p 6379 

6、退出redis  执行 shutdown  然后exit
</code></pre><p><strong>5、nginx的安装配置</strong></p>
]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据库索引解析]]></title>
      <url>http://yoursite.com/2017/03/17/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B4%A2%E5%BC%95/</url>
      <content type="html"><![CDATA[<p>索引是对数据库表中一列或多列的值进行排序的一种结构，使用索引可快速访问数据库表中的特定信息。</p>
<p>创建一个普通的索引（一个最简单的索引 没有任何限制）</p>
<pre><code>方式1：CREATE INDEX indexName ON tableName(columnName(length)); 
方式2：ALTER tableName ADD INDEX [indexName] ON (columnName(length))
方式3：CREATE TABLE mytable( id int not null, username varchar(16) not null,
         INDEX [indexName] (columnName(length)) );  
</code></pre><p>删除索引</p>
<pre><code>DROP INDEX [indexName] ON tableName;  
</code></pre><p>唯一索引（索引列的值必须唯一，但可以为null；如果是多个字段组合索引，那么列值得组合唯一）</p>
<p>创建唯一索引</p>
<pre><code>方式1：CREATE UNIQUE INDEX indexName ON tableName(columnName(length)) 

方式2：ALTER tableName ADD UNIQUE [indexName] ON (columnName(length)) 

方式3：CREATE TABLE tableName( ID INT NOT NULL, username VARCHAR(16) NOT     
            NULL, UNIQUE [indexName] (columnName(length)) );  
</code></pre><p>主键索引（一种特殊的唯一索引，不可以为null）</p>
<p>创建主键索引</p>
<pre><code>ALTER TABLE tableName ADD PRIMARY KEY (columnName)
</code></pre><p>组合索引（多个字段的索引）</p>
<p>创建组合索引</p>
<pre><code>ALTER TABLE tableName ADD INDEX index_name ( column1, column2, column3 )
</code></pre><p>创建索引可以大大提高系统的性能:</p>
<p>第一，通过创建唯一性索引，可以保证数据库表中每一行数据的唯一性。 </p>
<p>第二，可以大大加快数据的检索速度，这也是创建索引的最主要的原因。 </p>
<p>第三，可以加速表和表之间的连接，特别是在实现数据的参考完整性方面特别有意义。 </p>
<p>第四，在使用分组和排序 子句进行数据检索时，同样可以显著减少查询中分组和排序的时间。 </p>
<p>第五，通过使用索引，可以在查询的过程中，使用优化隐藏器，提高系统的性能。 </p>
<p>增加索引也有许多不利的方面:</p>
<p>第一，创建索引和维护索引要耗费时间，这种时间随着数据量的增加而增加。 </p>
<p>第二，索引需要占物理空间，除了数据表占数据空间之外，每一个索引还要占一定的物理空间，如果要建立聚簇索引，那么需要的空间就会更大。 </p>
<p>第三，当对表中的数据进行增加、删除和修改的时候，索引也要动态的维护，这样就降低了数据的维护速度。 </p>
]]></content>
      
        <categories>
            
            <category> 数据库 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[easyui datagrid与form搜索框整合的小问题]]></title>
      <url>http://yoursite.com/2017/03/15/easyui%20datagrid%E5%92%8Cform%E5%B0%8F%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>先附代码</p>
<pre><code> &lt;div region=&quot;north&quot; title=&quot;图书信息查询&quot; style=&quot;height: 60px;background: rgb(215, 231, 255);&quot;&gt;
    &lt;form id=&quot;mysearch&quot; method=&quot;post&quot;&gt;
        书名:&lt;input type=&quot;text&quot; name=&quot;name&quot; size=&quot;10&quot;/&gt;&amp;nbsp;
        书号:&lt;input type=&quot;text&quot; name=&quot;isbn&quot; size=&quot;10&quot;/&gt;&amp;nbsp;
        类别:&lt;input type=&quot;text&quot; class=&quot;easyui-combotree&quot; id=&quot;type&quot; name=&quot;type&quot;
                  size=&quot;20&quot;/&gt;&amp;nbsp;
        作者:&lt;input type=&quot;text&quot; name=&quot;author&quot; size=&quot;10&quot;/&gt;&amp;nbsp;
        价格区间:&lt;input type=&quot;text&quot; class=&quot;easyui-numberbox&quot; name=&quot;min_price&quot; size=&quot;1&quot;/&gt;—&lt;input type=&quot;text&quot; class=&quot;easyui-numberbox&quot; name=&quot;max_price&quot; size=&quot;1&quot;/&gt;&amp;nbsp;
        是否显示无库存书籍:&lt;select name=&quot;isLeft&quot; style=&quot;width:100&quot;&gt;
        &lt;option value=&quot;1&quot; selected=&quot;true&quot;&gt;是&lt;/option&gt;
        &lt;option value=&quot;0&quot;&gt;否&lt;/option&gt;
    &lt;/select&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
        &lt;a id=&quot;search-btn&quot; class=&quot;easyui-linkbutton&quot; iconCls=&quot;icon-search&quot;&gt;查询&lt;/a&gt; &amp;nbsp;&amp;nbsp;
        &lt;a id=&quot;clear-btn&quot; class=&quot;easyui-linkbutton&quot; iconCls=&quot;icon-remove&quot;&gt;清空&lt;/a&gt;
    &lt;/form&gt;
&lt;/div&gt;

&lt;table id=&quot;ss&quot; class=&quot;easyui-datagrid&quot;
               data-options=&quot;url:&apos;book-getLists.action&apos;,fit:true,singleSelect:false,idField:&apos;book_id&apos;,toolbar:&apos;#tb&apos;,pagination:&apos;true&apos;&quot;&gt;
            &lt;thead&gt;
            &lt;tr&gt;
                &lt;th data-options=&quot;field:&apos;book_id&apos;,width:100,checkbox:&apos;true&apos;&quot;&gt;Id&lt;/th&gt;
                &lt;th data-options=&quot;field:&apos;book_isbn&apos;,width:100&quot;&gt;书号&lt;/th&gt;
                &lt;th data-options=&quot;field:&apos;book_name&apos;,width:100&quot;&gt;书籍名称&lt;/th&gt;
                &lt;th data-options=&quot;field:&apos;book_type&apos;,width:100&quot;&gt;书籍分类&lt;/th&gt;
                &lt;th data-options=&quot;field:&apos;book_author&apos;,width:100&quot;&gt;书籍作者&lt;/th&gt;
                &lt;th data-options=&quot;field:&apos;book_price&apos;,width:100&quot;&gt;价格&lt;/th&gt;
                &lt;th data-options=&quot;field:&apos;book_totalNumber&apos;,width:100&quot;&gt;书籍总库存&lt;/th&gt;
                &lt;th data-options=&quot;field:&apos;book_loanNumber&apos;,width:100&quot;&gt;书籍借出数量&lt;/th&gt;
                &lt;th data-options=&quot;field:&apos;book_saleNumber&apos;,width:100&quot;&gt;书籍售出数量&lt;/th&gt;
                &lt;th data-options=&quot;field:&apos;book_leftNumber&apos;,width:100&quot;&gt;书籍剩余数量&lt;/th&gt;
                &lt;th data-options=&quot;field:&apos;book_publisher&apos;,width:100&quot;&gt;出版社&lt;/th&gt;
                &lt;th data-options=&quot;field:&apos;book_publishDate&apos;,width:&apos;auto&apos;&quot;&gt;出版时间&lt;/th&gt;
                &lt;th data-options=&quot;field:&apos;book_keyword&apos;,width:100&quot;&gt;关键字&lt;/th&gt;
                &lt;th data-options=&quot;field:&apos;book_introduction&apos;,width:&apos;auto&apos;&quot;&gt;简介&lt;/th&gt;
                &lt;th data-options=&quot;field:&apos;remarks&apos;,width:&apos;auto&apos;&quot;&gt;备注&lt;/th&gt;
                &lt;th data-options=&quot;field:&apos;record_date&apos;,width:&apos;auto&apos;&quot;&gt;登记日期&lt;/th&gt;
                &lt;th data-options=&quot;field:&apos;update_date&apos;,width:&apos;auto&apos;&quot;&gt;修改日期&lt;/th&gt;
                &lt;th data-options=&quot;field:&apos;user&apos;,width:100&quot;&gt;操作员&lt;/th&gt;
            &lt;/tr&gt;
            &lt;/thead&gt;
        &lt;/table&gt;
</code></pre><p>刚开始自己的思路是这样子的：提交表单，然后把查询过来的值放到datagrid里面，但是发现不行。<br>chrom js调试发现每次提交表单时，都发送了两次ajax请求；<br>后来仔细一想，应该是datagrid的加载又执行了一次ajax请求；<br>于是，这种思路失败；不管请求参数是怎样，后来datagrid都会自动加载给的url链接获取数据；</p>
<pre><code>//查询图书
      $(&quot;#search-btn&quot;).click(function(){
          $(&apos;#mysearch&apos;).form(&apos;submit&apos;, {
              url: &apos;book-getLists.action&apos;,
              success: function (data) {
                  var data = eval(&apos;(&apos; + data + &apos;)&apos;);
                  $(&quot;#ss&quot;).datagrid(&apos;load&apos;,data);
              }
          });
          return false;
      });
</code></pre><p>失败后，仔细查看了easyui手册，发现datagrid可以带参数加载数据；</p>
<pre><code>$(&apos;#dg&apos;).datagrid(&apos;load&apos;, {    
        name: &apos;easyui&apos;,    
        address: &apos;ho&apos;   
    }); 
</code></pre><p>所以现在的问题是得把表单的数据做处理传输到datagrid</p>
<p>有一种笨方法就是用jquery获取表单的各个元素的值，然后再给datagrid；</p>
<p>然后我用的是自己写一个方法，将表单转换成一个对象数组，方便重用</p>
<pre><code>//序列化表单
 function serializeForm(form){
     var obj = {};
     $.each(form.serializeArray(),function(index){
         if(obj[this[&apos;name&apos;]]){
             obj[this[&apos;name&apos;]] = obj[this[&apos;name&apos;]] + &apos;,&apos;+this[&apos;value&apos;];
         } else {
             obj[this[&apos;name&apos;]] =this[&apos;value&apos;];
         }
     });
     return obj;
 }

  //查询图书
     $(&quot;#search-btn&quot;).click(function(){
         $(&quot;#ss&quot;).datagrid(&apos;load&apos;,serializeForm($(&quot;#mysearch&quot;)));
         return false;
     });
</code></pre><p>问题完美解决！</p>
<p>附界面一只：</p>
<p> <img src="https://raw.githubusercontent.com/kingrocy/markdown-pic/master/image/easui-datagrid-form.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> easyui </category>
            
        </categories>
        
        
        <tags>
            
            <tag> easyui </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[git实际使用]]></title>
      <url>http://yoursite.com/2017/03/15/idea%E4%BD%BF%E7%94%A8git/</url>
      <content type="html"><![CDATA[<p>先说一下写这篇文章的缘由吧；</p>
<p>因为自己在公司用笔记本办公，然后在家用台式机；电脑桌空间较小，物品比较杂乱。所以每次在家用笔记本的时候，都很难受。而且，笔记本几年前买的，电脑屏幕小，开发经常性的需要多开，然后多个应用的界面挤满了本来就不大的屏幕，很难受。所以就想 利用github来实现笔记本和台式机协同开发。</p>
<p>先拿自己的毕业设计作为’样本’试试看；</p>
<p>这次使用git没用用git bash here了；用了集成了git的idea，，感觉真的很爽，太方便了。。</p>
<p>1、先在idea上设置一下git，见下图</p>
<p>  <img src="https://raw.githubusercontent.com/kingrocy/markdown-pic/master/image/idea git.png" alt=""></p>
<p>  <img src="https://raw.githubusercontent.com/kingrocy/markdown-pic/master/image/idea github.png" alt=""></p>
<p>2、进入VCS/import into Version Control/Create Git Reposity，然后选中自己的项目作为git reposity初始化；</p>
<p>3、当然这个仓库是在你本地上的，如果想发布到github上，就执行git/reposity/push 上传到github上，当然，你先得在本地上add、commit 你的项目到git reposity中</p>
<p> <img src="https://raw.githubusercontent.com/kingrocy/markdown-pic/master/image/git push.png" alt=""></p>
<p>4、另外，在idea中可以用git 很形象直观的看到自己修改的记录，对代码作了哪些变动。<br>git/show history 然后在左侧的小图标上可以看到compare/compare local的按钮。。。真的厉害</p>
]]></content>
      
        <categories>
            
            <category> git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> idea </tag>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[一些生冷的sql语句]]></title>
      <url>http://yoursite.com/2017/03/13/sql/</url>
      <content type="html"><![CDATA[<p>1、给已经建好的表对某一字段添加唯一约束</p>
<pre><code>ALTER TABLE book add unique(book_isbn)
</code></pre><p>2、给表的字段设置默认值</p>
<pre><code>ALTER TABLE book_type ALTER COLUMN parent_id SET DEFAULT 0;
</code></pre><p>3、增加字段</p>
<pre><code>alter table gov_senddocumentNum add categoryId varchar(20)
</code></pre>]]></content>
      
        <categories>
            
            <category> sql </category>
            
        </categories>
        
        
        <tags>
            
            <tag> sql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用IDEA搭建web项目开发环境]]></title>
      <url>http://yoursite.com/2017/03/13/idea/</url>
      <content type="html"><![CDATA[<p>idea这款编辑器也不知道是什么时候突然流行起来的，感觉好多人都在用。所以 我又光荣的随波逐流体验了idea下进行java开发<br>，</p>
<p>首先，先不论功能，idea给我的第一印象是界面很好看，很符合我的审美观；idea和eclipse的UI就像是miui和emui的差别。自从用完荣耀6 Plus之后，我果断的成为了华为的黑粉，不说性能，ui太丑，主题万年没啥更新的，虚拟键更是反人类。</p>
<p>有点扯远了，idea用起来比eclipse慢，台式机有时候都卡卡的。但eclipse我也不好说了，最近在做毕业设计时，经常出现莫名其妙的bug，但是eclipse都一点反应都没。该打印的输出语句都没，虽然说后来自己给项目配置log4j，舍弃了eclipse的控制台，但这也坚定了我从eclipse转向idea。</p>
<p>IDEA里面，我喜欢新建一个空白工程，然后再空白工程里new Module(新建模块),新建的模块可以使java工程，也可以说web工程。</p>
<p>当然，新建java工程我也不说什么了，很简单的，自己摸索几下就出来了。新建web工程也就几个注意点吧，首先是建好你的class文件输出目录，这个相当于eclipse中的WEB-INF/classes，还有就是jar包引用lib目录，一般与WEB-INF/lib对应。<br>建好了这两个目录之后，打开File/Project structure(项目结构)，在path下，选中user module compile out path，然后把自己新建的classes和lib文件夹选中，web项目的文件路径就弄好了。</p>
<p>然后最后的话我们得配置tomcat server。不知道为什么，自己在添加server的时候一直找不到Tomcat，后来在setting里面输入tomcat搜索，找到了，估计idea没把tomcat这个plugin装进去吧。可是自己在idea的plugins里面也没找到tomcat的选项啊。。莫名其妙，，，tomcat找到了然后把本机的tomcat目录配置到idea中。再把项目发布到tomcat就行。</p>
<p>还有，我的tomcat在eclispe里运行没问题，但在idea中就报java.lang.UnsatisfiedLinkError: D:\work\apache-tomcat-7.0.47\bin\tcnative-1.dll: Can’t load IA 32-bit .dll on a AMD 64-bit platform，，我也是醉了，网上百度了下，感觉他们的回答不靠谱，也就没管了，反正这个错误貌似不影响开发。。。</p>
<p>等这周上班时，准备把毕业设计迁移到idea里去。慢慢熟悉idea了。。。。。。。</p>
]]></content>
      
        <categories>
            
            <category> idea </category>
            
        </categories>
        
        
        <tags>
            
            <tag> idea </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git]]></title>
      <url>http://yoursite.com/2017/02/24/git/</url>
      <content type="html"><![CDATA[<p>配置用户名和邮箱地址—自报家门<br>$ git config –global user.name “Your Name”<br>$ git config –global user.email “email@example.com”</p>
<p>创建本地资源库  比如在D盘创建一个Yun:</p>
<p>在桌面Git Bash Here<br>cd /d<br>mkdir Yun //创建一个Yun文件夹<br>cd Yun<br>git init //初始化 将这个文件夹变成Git管理的仓库</p>
<p>现在本地的仓库有了 我们想办法让它帮我们管理一些资源，比如说我们添加一个图片文件夹image进去</p>
<p>①、手动的把这个文件夹放到D:/Yun目录下</p>
<p>②、告诉Git把这个图片文件夹添加到仓库中<br>git add image        //可反复使用 添加多个文件</p>
<p>③、告诉Git把文件提交<br>git commit -m “提交了一个图片的文件夹”  // -m后面输入的表示本次提交的说明</p>
<p>//查看仓库状态  git status</p>
<p>//查看文件修改内容 git diff</p>
<p>//查看文件提交历史 git log        格式化记录   git log –pretty=oneline    </p>
<p>//查看命令历史     git reflog</p>
<p>版本回退：在git中HEAD表示当前版本，上一个版本HEAD^, 也可以HEAD~1（需要验证）</p>
<p>版本回退使用git reset命令   $ git reset –hard HEAD^</p>
<p>知道版本号可以回到任意版本    $ git reset –hard 3628164   //数字表示版本号 commit id   版本号过长可以不写全，但要保证能唯一对应</p>
<p>工作区和暂存区：<br>工作区就是我们新建的那个Yun的目录：<br>工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。<br>Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，<br>还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。</p>
<p>文件还原  git checkout – file  让这个文件回到最近一次git commit或git add时的状态，丢弃工作区的修改</p>
<p>git reset HEAD file 把暂存区的修改回退到工作区<br>git checkout – file 丢弃工作区的修改  用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。</p>
<p>git rm file 删除工作区的文件 然后可以用git commit提交  这样版本库里面的也被删除掉了</p>
<p>Git远程仓库：github</p>
<p>将本地仓库与github “绑定”<br>git remote add git@github.com:kingrocy/kingrocy.github.io.git</p>
<p>git push -u origin master //把本地 master 分支 推送到 服务器的master分支上，如果服务器没有此分支，就 新建 此分支。这也是 在服务器上新建分支的一种方法</p>
<p>如何克隆别人的git仓库？</p>
<p>现在本地初始化一个git仓库 git init<br>然后克隆 git clone git@github.com:kingrocy/kingrocy.github.io.git</p>
<h2 id="学习于廖雪峰的-史上最浅显易懂的Git教程"><a href="#学习于廖雪峰的-史上最浅显易懂的Git教程" class="headerlink" title="学习于廖雪峰的 史上最浅显易懂的Git教程"></a>学习于廖雪峰的 史上最浅显易懂的Git教程</h2><p><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/" target="_blank" rel="external">#链接#</a></p>
]]></content>
      
        <categories>
            
            <category> git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[工厂设计模式]]></title>
      <url>http://yoursite.com/2017/02/24/%E5%B7%A5%E5%8E%82%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p>工厂模式可以动态的决定实例化哪一个类</p>
<p>工厂模式可以简单分为三种：</p>
<pre><code>1、简单工厂
2、工厂方法
3、抽象工厂
</code></pre><p>废话不多说 直接先来个<strong>简单工厂</strong>（工厂根据条件来决定生产哪一种产品）</p>
<pre><code> //简单工厂设计模式
public class SimpleFactoryPattern {

    //测试简单工厂设计模式 看工厂能否取出我所需要的产品
    public static void main(String[] args) {

        Phone phone=Factory.getProduct(&quot;Mi&quot;);

        phone.show();
    }
}


//定义一个工厂  根据产品名称来获取对应产品
class Factory{

    public static Phone getProduct(String productName){    
        if(&quot;Mi&quot;.equals(productName)){
            return new Mi();
        }else if(&quot;Meizu&quot;.equals(productName)){
            return new Meizu();
        }else {
            return null;
        }
    }
}


interface Phone{
    void show();
}

class Mi implements Phone{

    public void show() {
        System.out.println(&quot;小米手机，为发烧而生!&quot;);
    }
}

class Meizu implements Phone{

    public void show() {
        System.out.println(&quot;MX 为梦想而生!&quot;);
    }


}
</code></pre><p>简单工厂就是将生产产品的代码放到一个类中，根据某种条件来指定生产的产品。</p>
<p>这样的实现方式有两大问题:</p>
<pre><code>1、如果工厂要添加新的产品，必须改这个类的代码
2、若工厂的产品种类繁多，那么这个类的处理逻辑将会十分复杂，不便于维护
</code></pre><p><strong>工厂方法</strong></p>
<pre><code>//工厂模式之二：工厂方法
public class FactoryMethod {

    //测试
    public static void main(String[] args) {
        CPUFactory intelCPU=new IntelCPUFactory();
        intelCPU.getCPU().show();

        CPUFactory amdCPU=new AmdCPUFactory();
        amdCPU.getCPU().show();
    }

}

//工厂中某一种类的产品接口
interface CPU{
    void show();
}

class IntelCPU implements CPU{

    public void show() {
        System.out.println(&quot;我是Intel的CPU&quot;);
    }

}

class AmdCPU implements CPU{

    public void show() {
        System.out.println(&quot;我是AMD的CPU&quot;);
    }

}

//工厂接口
interface CPUFactory{
    CPU getCPU();
}

//IntelCPU 工厂
class IntelCPUFactory implements CPUFactory{

    public CPU getCPU() {
        return new IntelCPU();
    }

}

//AMDCPU 工厂
class AmdCPUFactory implements CPUFactory{

    public CPU getCPU() {
        return new AmdCPU();
    }

}
</code></pre><p>工厂方法把不同的产品放在实现了工厂接口的不同工厂类里面，这样就算其中一个工厂类出了问题，其他工厂类也能正常工作，互相不受影响，以后增加新产品，也只需要新增一个实现工厂接口工厂类，就能达到，不用修改已有的代码。</p>
<p><strong>抽象工厂</strong></p>
<pre><code>interface IProduct1 {  
    public void show();  
}  
interface IProduct2 {  
    public void show();  
}  

class Product1 implements IProduct1 {  
    public void show() {  
        System.out.println(&quot;这是1型产品&quot;);  
    }  
}  
class Product2 implements IProduct2 {  
    public void show() {  
        System.out.println(&quot;这是2型产品&quot;);  
    }  
}  

interface IFactory {  
    public IProduct1 createProduct1();  
    public IProduct2 createProduct2();  
}  
class Factory implements IFactory{  
    public IProduct1 createProduct1() {  
        return new Product1();  
    }  
    public IProduct2 createProduct2() {  
        return new Product2();  
    }  
}  

public class AbstratorFactory {  
    public static void main(String[] args){  
        IFactory factory = new Factory();  
        factory.createProduct1().show();  
        factory.createProduct2().show();  
    }  
} 
</code></pre><p>对工厂产品进行分类管理</p>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 工厂设计模式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux根据端口号杀进程]]></title>
      <url>http://yoursite.com/2017/02/20/linux%E6%A0%B9%E6%8D%AE%E7%AB%AF%E5%8F%A3%E5%8F%B7%E6%9D%80%E8%BF%9B%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h2 id="1-查找被占用的端口"><a href="#1-查找被占用的端口" class="headerlink" title="1.查找被占用的端口"></a><strong>1.查找被占用的端口</strong></h2><pre><code>netstat -tln  查看端口使用情况

netstat -tln | grep 8060   查看端口8060的使用情况
</code></pre><h2 id="2-查看端口属于哪个程序？端口被哪个进程占用"><a href="#2-查看端口属于哪个程序？端口被哪个进程占用" class="headerlink" title="2.查看端口属于哪个程序？端口被哪个进程占用?"></a><strong>2.查看端口属于哪个程序？端口被哪个进程占用?</strong></h2><pre><code>lsof -i:8060
</code></pre><h2 id="3-杀掉占用端口的进程-根据pid杀掉"><a href="#3-杀掉占用端口的进程-根据pid杀掉" class="headerlink" title="3.杀掉占用端口的进程  根据pid杀掉"></a><strong>3.杀掉占用端口的进程  根据pid杀掉</strong></h2><pre><code>kill -9 进程id  
</code></pre>]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[单例设计模式]]></title>
      <url>http://yoursite.com/2017/02/20/%E5%8D%95%E4%BE%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h3 id="单线程下的单例模式：多线程下不安全"><a href="#单线程下的单例模式：多线程下不安全" class="headerlink" title="单线程下的单例模式：多线程下不安全"></a>单线程下的单例模式：多线程下不安全</h3><pre><code>class Singleton{

    private static Singleton instance=null;        
    private Singleton(){

    }        
    public static Singleton getInstance(){            
        if(instance==null)
                instance=new Singleton();
        return instance;
    }
}
</code></pre><p>测试代码：</p>
<pre><code>    public class TestSingleton implements Runnable {
    public static void main(String[] args) {
            TestSingleton t=new TestSingleton();

            Thread t1=new Thread(t);
            Thread t2=new Thread(t);
            Thread t3=new Thread(t);
            Thread t4=new Thread(t);
            t1.start();
            t2.start();
            t3.start();
            t4.start();
    }

    public void run() {
        while(true){
            System.out.println(Singleton.getInstance());
            try {
                Thread.sleep(10);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }
}
</code></pre><p>输出结果：</p>
<blockquote>
<pre><code>TestAlgorithm.Singleton2@499e5463
TestAlgorithm.Singleton2@499e5463
TestAlgorithm.Singleton2@2980e8cb
TestAlgorithm.Singleton2@10482bba
TestAlgorithm.Singleton2@2980e8cb
TestAlgorithm.Singleton2@2980e8cb
TestAlgorithm.Singleton2@2980e8cb
TestAlgorithm.Singleton2@2980e8cb
</code></pre></blockquote>
<p>测试选中的结果是程序输出结果的前几行；因为在程序刚开始执行时，四个进程都会判断出此时instance对象为null，所以执行Singleton.getInstance()方法获取instance对象；观察结果可知，四个进程创建了三个instance对象，所以这个单例不满足多线程下的要求。</p>
<p>所以在创建instance对象时，我们需要加一把锁，保证同时只能有一个进程才能创建instance对象</p>
<h3 id="多线程下的单例模式：线程安全"><a href="#多线程下的单例模式：线程安全" class="headerlink" title="多线程下的单例模式：线程安全"></a>多线程下的单例模式：线程安全</h3><pre><code>class Singleton{

    private static Singleton instance=null;

    private Singleton(){

    }

    public static Singleton getInstance(){

        if(instance==null){            
            synchronized(Singleton.class){//加锁，如果两个线程同时进来
                if (instance==null) {//防止第一个线程创建完对象后释放锁，第二个线程进入重复创建
                    instance=new Singleton();                    
                }            
            }
        }                
        return instance;
    }
}
</code></pre><p>测试一下：<br>&gt;<br>    TestAlgorithm.Singleton@399ae135<br>    TestAlgorithm.Singleton@399ae135<br>    TestAlgorithm.Singleton@399ae135<br>    TestAlgorithm.Singleton@399ae135<br>    TestAlgorithm.Singleton@399ae135<br>多线程下也是线程安全的。。。</p>
<h3 id="其实还有一种终极方法可以更加完美的实现单例模式：使用enum-枚举"><a href="#其实还有一种终极方法可以更加完美的实现单例模式：使用enum-枚举" class="headerlink" title="其实还有一种终极方法可以更加完美的实现单例模式：使用enum(枚举)"></a>其实还有一种终极方法可以更加完美的实现单例模式：使用enum(枚举)</h3><p><em>使用enum关键字来实现单例模式的好处是这样非常简洁，并且无偿地提供了序列化机制，绝对防止多次实例化，即使是在面对复杂的序列化或者反射攻击的时候。——来自《Effective Java》</em></p>
<p>代码：</p>
<pre><code>public enum SingletonByEnum {
    INSTANCE;// 唯一实例

   public void print() {
       System.out.println(INSTANCE);
   }

   public static void main(String[] args) {
       //获取该实例：
       SingletonByEnum singleton = SingletonByEnum.INSTANCE;
       singleton.print();
   }
}
</code></pre>]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 单例设计模式 </tag>
            
            <tag> 线程 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java知识点复习总结]]></title>
      <url>http://yoursite.com/2017/02/19/java%E7%9F%A5%E8%AF%86%E7%82%B9%E5%A4%8D%E4%B9%A0%E6%80%BB%E7%BB%93-%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%88%E6%AD%A4%E6%96%87%E5%B8%B8%E6%9B%B4%EF%BC%89/</url>
      <content type="html"><![CDATA[<h3 id="注：以下纯属个人心得，不足之处还望指点"><a href="#注：以下纯属个人心得，不足之处还望指点" class="headerlink" title="注：以下纯属个人心得，不足之处还望指点"></a><font color="red">注：以下纯属个人心得，不足之处还望指点</font></h3><h3 id="一、基本语法"><a href="#一、基本语法" class="headerlink" title="一、基本语法"></a>一、基本语法</h3><ol>
<li><p>数据类型： </p>
<ol>
<li><p>基本数据类型：</p>
<pre><code>1. 数值型: 
        1. 整数类型：byte,short,int,long
        2. 浮点类型：float,double
2. 字符型: char
3. 布尔型: boolean
- java中的整型常量默认为int型，若想声明一个Long型常量，需在常量后加&apos;l&apos;或&apos;L&apos;;
- java的浮点数常量默认为double，若想声明一个float常量，需在常量后加&apos;f&apos;或&apos;F&apos;
</code></pre></li>
<li><p>引用数据类型：</p>
<pre><code>1.类 class(我们常说的字符串就是String类，是引用数据类型；而不是基本数据类型)
2.接口 interface
3.数组 []
</code></pre></li>
<li><p>基本数据类型的转换</p>
<ol>
<li><p>自动类型转换：容量小的数据类型自动转为容量大的数据类型</p>
<pre><code>*数据类型按容量大小排序（由小到大）：（char）、byte、short、int、long、float、double
*char容量较小，但不是数值型，byte,short,char之间不会相互转换，他们三者在计算时首先转换为int类型。
*有多种类型的数据混合运算时，系统首先自动将所有数据转换成容量最大的那种数据类型，然后再进行计算
*当把任何基本类型的值和字符串值进行连接运算时(+)，基本类型的值将自动转化为字符串类型。 
</code></pre></li>
<li><p>强制类型转换：</p>
<p> 自动类型转换的逆过程，将容量大的数据类型转换为容量小的数据类型，使用时需要加上（要转换的类型），可能会造成精度缺失<br> 通常，字符串不能直接转换为基本类型，但通过基本类型对应的包装类则可以实现把字符串转换成基本类型。</p>
</li>
</ol>
<p>重点：String类型解析</p>
<p> 1.String类是一个不可变类，String对象创建出来就不可能被改变，创建出的字符串将存放在字符串常量池，保证每个字符串常量只有一个<br> 2.如字符串经常被改变，可用stringbuffer        </p>
</li>
</ol>
</li>
<li><p>变量</p>
<pre><code>1. 成员变量：
            1. 实例变量：不以static修饰
            2. 类变量：以static修饰
2. 局部变量：
            1. 形参：方法签名中定义的变量
            2. 方法局部变量：方法内定义
            3. 代码块局部变量：代码块内定义
</code></pre><p> <strong>注：局部变量除了形参之外，都得显式初始化；</strong></p>
</li>
<li><p>运算符</p>
<ol>
<li>前++和后++的区别：前++先运算后取值，后++先取值后运算；前–和后–也是一样；</li>
<li>&amp;和&amp;&amp;的区别：(‘|’和’||’同理)          <ol>
<li>&amp;逻辑与，左边无论真假，右边都进行运算；</li>
<li>&amp;&amp;短路与，如果左边为真，右边参与运算，如果左边为假，那么右边不参与运算</li>
</ol>
</li>
</ol>
</li>
</ol>
<p>4.流程控制</p>
<p>break和continue的区别与作用：</p>
<ul>
<li>break语句用于终止某个语句块的执行    <blockquote>
<pre><code>  L1:{
    L2:{
        L3:{
            break L2;
        }
    }        
}
</code></pre></blockquote>
</li>
</ul>
<ul>
<li>continue语句用于跳过某个循环语句块的一次执行 </li>
</ul>
<ul>
<li>return直接结束整个方法，不论这个return 处于多少层循环之内；</li>
</ul>
<p><img src="https://raw.githubusercontent.com/kingrocy/markdown-pic/master/image/java执行过程.png" alt=""></p>
<h3 id="二、面向对象"><a href="#二、面向对象" class="headerlink" title="二、面向对象"></a>二、面向对象</h3><h4 id="面向对象特征：抽象、封装、继承、多态"><a href="#面向对象特征：抽象、封装、继承、多态" class="headerlink" title="面向对象特征：抽象、封装、继承、多态"></a>面向对象特征：抽象、封装、继承、多态</h4><ul>
<li><p>谈谈对多态的理解:</p>
<p>   所谓多态就是指程序中定义的引用变量所指向的具体类型和通过该引用变量发出的方法调用在编程时并不确定，而是在程序运行期间才确定，即一个引用变量倒底会指向哪个类的实例对象，该引用变量发出的方法调用到底是哪个类中实现的方法，必须在由程序运行期间才能决定。因为在程序运行时才确定具体的类，这样，不用修改源程序代码，就可以让引用变量绑定到各种不同的类实现上，从而导致该引用调用的具体方法随之改变，即不修改程序代码就可以改变程序运行时所绑定的具体代码，让程序可以选择多个运行状态，这就是多态性。</p>
</li>
<li><p>重载和重写的区别:</p>
<p>  1.重写：子类重写父类，是子类和父类之间多态性的一种表现；</p>
<p>  子类重写父类的规则：</p>
<pre><code>1.子类重写的方法不能比父类的方法有更严格的访问级别。
    比如父类的方法是protected，子类重写的方法必须是protected或者是public。
2.子类重写方法的参数列表必须与父类被重写的方法相同，如果子类方法的参数与父类
    对应的方法不同，是重载
3.返回类型必须与被重写方法相同
4.子类的重写方法不能抛出新的异常或者比父类被重写的方法更广的异常。
</code></pre><p>  2.重载：如果在一个类中定义了多个同名的方法，它们或有不同的参数个数或有不同的参数类型，则称为方法的重载(Overloading)。</p>
<p>  Overloaded的方法是可以改变返回值的类型</p>
</li>
<li><p>抽象类与接口</p>
<pre><code>1 抽象类里可以有构造方法，而接口内不能有构造方法。
2 抽象类中可以有普通成员变量，而接口中不能有普通成员变量。接口中只能有常量；
3 抽象类中可以包含非抽象的普通方法，而接口中所有的方法必须是抽象的，不能有非抽象的普通方法。
4 抽象类中的抽象方法的作用域可以为任意，但接口中的抽象方法只能是public类型的。
5 抽象类中可以包含静态方法，接口内不能包含静态方法。
6 一个类可以实现多个接口，但只能继承一个抽象类。
</code></pre></li>
<li><p>类加载时初始化顺序：</p>
<pre><code>父类--静态变量
父类--静态初始化块
子类--静态变量
子类--静态初始化块
父类--变量
父类--初始化块
父类--构造器
子类--变量
子类--初始化块
子类--构造器
</code></pre><p>静态变量、静态初始化块，变量、初始化块初始化了顺序取决于它们在类中出现的先后顺序。</p>
</li>
</ul>
<p>问题1：当一个对象被当作参数传递到一个方法后，此方法可改变这个对象的属性，并可返回变化后的结果，那么这里到底是值传递还是引用传递?</p>
<blockquote>
<p>答：是值传递。Java 编程语言只有值传递参数。当一个对象实例作为一个参数被传递到方法中时，参数的值就是对该对象的引用。对象的内容可以在被调用的方法中改变，但对象的引用是永远不会改变的</p>
</blockquote>
<h3 id="三、集合"><a href="#三、集合" class="headerlink" title="三、集合"></a>三、集合</h3><p><img src="https://raw.githubusercontent.com/kingrocy/markdown-pic/master/image/集合继承关系.png" alt=""></p>
<p><strong>Iterator: Iterator对象称为迭代器(设计模式的一种)，主要用于遍历 Collection 集合中的元素。</strong></p>
<pre><code>所有实现了Collection接口的集合类都有一个iterator()方法，用以返回一个实现了Iterator接口的对象。

Iterator 仅用于遍历集合，Iterator 本身并不提供承装对象的能力。如果需要创建 Iterator 对象，则必须有一个被迭代的集合。
</code></pre><p><strong>List:    有序可以重复</strong></p>
<pre><code>List集合类中元素有序、且可重复，集合中的每个元素都有其对应的顺序索引。
List容器中的元素都对应一个整数型的序号记载其在容器中的位置，可以根据序号存取容器中的元素。
List接口的实现类常用的有：ArrayList、LinkedList和Vector。
</code></pre><p><strong>List的实现类：</strong></p>
<pre><code>ArrayList：最底层是用数组实现的，线程不安全
LinkedList：基于链表结构实现，很少使用
Vector: 古老的集合类，是线程安全的，基本使用
</code></pre><p><strong>Set:    无序不可重复,Set中常用的方法都是Collection下定义的。</strong></p>
<pre><code>Set接口是Collection的子接口，set接口没有提供额外的方法
Set 集合不允许包含相同的元素，如果试把两个相同的元素加入同一个 Set 集合中，则添加操作失败。
要添加进Set中的元素所在的类，一定要重写equals()和hashCode()方法。 进而保证Set中元素的不可重复性！
</code></pre><p><strong>（==比较的是两个对象的地址，equals比较的是两个对象的内容）</strong></p>
<p><strong>Set的实现类：</strong></p>
<p><strong>HashSet：</strong></p>
<blockquote>
<p>① 按 Hash 算法来存储集合中的元素，因此具有很好的存取和查找性能。但不能保证元素的排列顺序，线程不安全</p>
<p>② 当向 HashSet 集合中存入一个元素时，HashSet 会调用该对象的 hashCode() 方法来得到该对象的 hashCode 值，然后根据 hashCode 值决定该对象在 HashSet 中的存储位置。</p>
<p>③ HashSet 集合判断两个元素相等的标准：两个对象通过 hashCode() 方法比较相等，并且两个对象的 equals() 方法返回值也相等</p>
</blockquote>
<p><strong>LinkedHashSet</strong>：LinkedHashSet 根据元素的 hashCode 值来决定元素的存储位置，同时使用链表维护元素的次序，使元素根据插入的顺序排列</p>
<p><strong>TreeSet</strong>：TreeSet 是 SortedSet 接口的实现类，TreeSet 可以确保集合元素处于排序状态。</p>
<p>TreeSet 两种排序方法：自然排序和定制排序。默认情况下，TreeSet 采用自然排序。</p>
<pre><code>自然排序: 要求被排序的类实现comparable接口，实现其抽象方法。在方法中定制排序规则                        
定制排序:创建一个实现了Comparator接口的类对象,将此对象作为形参传递给TreeSet的构造器中

        代码：
                package TestSet;
                import java.util.Comparator;
                import java.util.Set;
                import java.util.TreeSet;

                public class TestTreeSet {
                    public static void main(String[] args) {
                        //自然排序
                        Set&lt;Ball&gt; set1=new TreeSet&lt;&gt;();
                        Ball b=new Ball(2);
                        Ball b1=new Ball(1);
                        Ball b2=new Ball(3);

                        set1.add(b);
                        set1.add(b1);
                        set1.add(b2);

                        System.out.println(&quot;-------自然排序---------&quot;);

                        for (Ball ball : set1) {
                            System.out.println(ball);
                        }

                        //定制排序 
                        Comparator&lt;Man&gt; comparator=new Comparator&lt;Man&gt;() {

                            public int compare(Man o1, Man o2) {
                                    //根据Man的年龄来排序
                                    //return o1.age-o2.age; 
                                    //根据Man的姓名来排序
                                return o1.name.compareTo(o2.name);
                            }
                        };

                        Set set2=new TreeSet(comparator);

                        Man man1=new Man(&quot;AA&quot;, 20);
                        Man man2=new Man(&quot;CC&quot;, 15);
                        Man man3=new Man(&quot;BB&quot;, 30);

                        set2.add(man1);
                        set2.add(man2);
                        set2.add(man3);

                        System.out.println(&quot;-------定制排序---------&quot;);

                        for (Object man : set2) {
                            System.out.println(man);
                        }
                    }

                }
                //自然排序，类自身实现Comparable接口，重写compareTo方法
                class Ball implements Comparable&lt;Ball&gt; {

                    int length;

                    public Ball(int length) {
                        super();
                        this.length = length;
                    }

                    public int compareTo(Ball o) {
                        return this.length - o.length;// 返回值为正数表明大，为0表示相等，为负表示小
                    }

                    public String toString() {
                        return &quot;Ball [length=&quot; + length + &quot;]&quot;;
                    };

                }

                class Man {
                    String name;
                    int age;

                    public String toString() {
                        return &quot;Man [name=&quot; + name + &quot;, age=&quot; + age + &quot;]&quot;;
                    }

                    public Man(String name, Integer age) {
                        super();
                        this.name = name;
                        this.age = age;
                    }

                }
</code></pre><p>运行截图：</p>
<pre><code>-------自然排序---------
Ball [length=1]
Ball [length=2]
Ball [length=3]
-------定制排序---------
Man [name=AA, age=20]
Man [name=BB, age=30]
Man [name=CC, age=15]
</code></pre><p><img src="https://raw.githubusercontent.com/kingrocy/markdown-pic/master/image/Map继承树.png" alt=""></p>
<p><strong>Map</strong>:与Collection并列存在。用于保存具有映射关系的数据:Key-Value</p>
<p><strong>Map的实现类：</strong></p>
<p>HashMap:HashMap是 Map 接口使用频率最高的实现类。允许使用null键和null值，与HashSet一样，不保证映射的顺序。</p>
<p>LinkedHashMap:简单来说，是有顺序的HashMap,和LinkedList类似</p>
<p>TreeMap:和TreeSet类似,根据Map的key进行排序</p>
<p>Hashtable：是个古老的 Map 实现类，线程安全。与HashMap不同，Hashtable 不允许使用 null 作为 key 和 value    </p>
<p>Properties：Properties 类是 Hashtable 的子类，该对象用于处理属性文件</p>
<pre><code>代码：
            Properties pros = new Properties();
            pros.load(new FileInputStream(&quot;jdbc.properties&quot;));
            String user = pros.getProperty(&quot;user&quot;);
</code></pre><p>操作集合的工具类：Collections</p>
<p>操作数组的工具类：Arrays</p>
<p><strong>常见面试题:</strong></p>
<p><strong>Collection 和 Collections的区别？</strong></p>
<p>答：Collection是集合类的上级接口，继承与他的接口主要有Set 和 List.<br>Collections是针对集合类的一个帮助类，提供一系列静态方法实现对各种集合的搜索、排序、线程安全化等操作</p>
<p><strong>说出ArrayList,Vector, LinkedList的存储性能和特性</strong></p>
<p>答：ArrayList和Vector都是使用数组方式存储数据，此数组元素数大于实际存储的数据以便增加和<br>插入元素，它们都允许直接按序号索引元素，但是插入元素要涉及数组元素移动等内存操作，所以<br>索引数据快而插入数据慢，Vector由于使用了synchronized方法（线程安全），通常性能上较ArrayList<br>差，而LinkedList使用双向链表实现存储，按序号索引数据需要进行前向或后向遍历，但是插入数据时<br>只需要记录本项的前后项即可，所以插入速度较快。</p>
<p><strong>HashMap和Hashtable的区别？</strong></p>
<p>答：HashMap是Hashtable的轻量级实现（非线程安全的实现），他们都完成了Map接口，主要区别在于HashMap<br>            允许空（null）键值（key）,由于非线程安全，效率上可能高于Hashtable。</p>
<p>HashMap允许将null作为一个entry的key或者value，而Hashtable不允许。</p>
<p>HashMap把Hashtable的contains方法去掉了，改成containsvalue和containsKey。因为contains方法容易让<br>人引起误解。</p>
<p>Hashtable继承自Dictionary类，而HashMap是Map接口的一个实现。</p>
<p>最大的不同是，Hashtable的方法是Synchronize的，而HashMap不是，在多个线程访问Hashtable时，不需要<br>自己为它的方法实现同步，而HashMap 就必须为之提供外同步。 </p>
<h3 id="四、IO"><a href="#四、IO" class="headerlink" title="四、IO"></a>四、IO</h3><h3 id="五、多线程"><a href="#五、多线程" class="headerlink" title="五、多线程"></a>五、多线程</h3><p>多线程：<br>多线程的两种实现方式：</p>
<p>①、继承Thread类<br>public class TestThread {<br>    public static void main(String[] args) {<br>        Person p1 = new Person(“AA”);<br>        Person p2 = new Person(“BB”);<br>        Person p3 = new Person(“CC”);</p>
<pre><code>    p1.start();
    p2.start();
    p3.start();
}
</code></pre><p>}</p>
<p>class Person extends Thread {<br>    String name;</p>
<pre><code>Person(String name) {
    this.name = name;
}

public void run() {
    System.out.println(&quot;这是线程----&quot; + name);
}
</code></pre><p>}</p>
<p>②、实现Runnable接口<br>public class TestThread {<br>    public static void main(String[] args) {</p>
<pre><code>    Animals a=new Animals();

    Thread t1=new Thread(a);
    Thread t2=new Thread(a);
    Thread t3=new Thread(a);

    t1.start();
    t2.start();
    t3.start();
}
</code></pre><p>}</p>
<p>class Animals implements Runnable {</p>
<pre><code>public void run() {
    System.out.println(&quot;xxxxxxxxxxx&quot;);
}
</code></pre><p>}</p>
<p>每个Java程序都有一个隐含的主线程： main 方法</p>
<p>线程的几种状态：新建、就绪、运行、阻塞、死亡</p>
<p>生产者消费者:<a href=""></a></p>
<p>java中有几种方法可以实现一个线程？用什么关键字修饰同步方法? stop()和suspend()方法为何不推荐使用？</p>
<p>答：有两种实现方法，分别是继承Thread类与实现Runnable接口<br>用synchronized关键字修饰同步方法<br>反对使用stop()，是因为它不安全。它会解除由线程获取的所有锁定，而且如果对象处于一种不连贯状态，<br>那么其他线程能在那种状态下检查和修改它们。结果很难检查出真正的问题所在。suspend()方法容易发生死锁。<br>调用suspend()的时候，目标线程会停下来，但却仍然持有在这之前获得的锁定。此时，其他任何线程都不能访<br>问锁定的资源，除非被”挂起”的线程恢复运行。对任何线程来说，如果它们想恢复目标线程，同时又试图<br>使用任何一个锁定的资源，就会造成死锁。所以不应该使用suspend()，而应在自己的Thread类中置入一个标志，<br>指出线程应该活动还是挂起。若标志指出线程应该挂起，便用wait()命其进入等待状态。<br>若标志指出线程应当恢复，则用一个notify()重新启动线程。</p>
<p>sleep() 和 wait() 有什么区别? </p>
<p>答：sleep是线程类（Thread）的方法，导致此线程暂停执行指定时间，给执行机会给其他线程，但是监控状态<br>依然保持，到时后会自动恢复。调用sleep不会释放对象锁。</p>
<p>wait是Object类的方法，对此对象调用wait方法导致本线程放弃对象锁，进入等待此对象的等待锁定池，只有针对<br>此对象发出notify方法（或notifyAll）后本线程才进入对象锁定池准备获得对象锁进入运行状态。</p>
<p>同步和异步有何异同，在什么情况下分别使用他们？举例说明。</p>
<p>答：如果数据将在线程间共享。例如正在写的数据以后可能被另一个线程读到，或者正在读的数据可能已经被另一个<br>线程写过了，那么这些数据就是共享数据，必须进行同步存取。<br>当应用程序在对象上调用了一个需要花费很长时间来执行的方法，并且不希望让程序等待方法的返回时，就应该使用<br>异步编程，在很多情况下采用异步途径往往更有效率。</p>
<p>启动一个线程是用run()还是start()?</p>
<p>答：启动一个线程是调用start()方法，使线程所代表的虚拟处理机处于可运行状态，这意味着它可以由JVM调度<br>并执行。这并不意味着线程就会立即运行。run()方法可以产生必须退出的标志来停止一个线程。 </p>
<p>当一个线程进入一个对象的一个synchronized方法后，其它线程是否可进入此对象的其它方法?</p>
<p>答：不能，一个对象的一个synchronized方法只能由一个线程访问。</p>
<p>请说出你所知道的线程同步的方法。</p>
<p>答：wait():使一个线程处于等待状态，并且释放所持有的对象的lock。<br>sleep():使一个正在运行的线程处于睡眠状态，是一个静态方法，调用此方法要捕捉InterruptedException异常。<br>notify():唤醒一个处于等待状态的线程，注意的是在调用此方法的时候，并不能确切的唤醒某一个等待状态的<br>线程，而是由JVM确定唤醒哪个线程，而且不是按优先级。<br>Allnotity():唤醒所有处入等待状态的线程，注意并不是给所有唤醒线程一个对象的锁，而是让它们竞争。</p>
<p>多线程有几种实现方法,都是什么?同步有几种实现方法,都是什么? </p>
<p>答：多线程有两种实现方法，分别是继承Thread类与实现Runnable接口<br>同步的实现方面有两种，分别是synchronized,wait与notify</p>
<p>线程的基本概念、线程的基本状态以及状态之间的关系</p>
<p>答：线程指在程序执行过程中，能够执行程序代码的一个执行单位，每个程序至少都有一个线程，也就是程序本身。<br>Java中的线程有四种状态分别是：运行、就绪、挂起、结束</p>
<p>简述synchronized和java.util.concurrent.locks.Lock的异同 ？</p>
<p>答：<br>主要相同点：Lock能完成synchronized所实现的所有功能<br>主要不同点：Lock有比synchronized更精确的线程语义和更好的性能。synchronized会自动释放锁，而Lock一定要求<br>程序员手工释放，并且必须在finally从句中释放。 </p>
<p>一、判断题 </p>
<pre><code>1.C 和 Java 都是多线程语言。（错误 ） 

2.如果线程死亡，它便不能运行。（ 正确）

3.在 Java 中，高优先级的可运行线程会抢占低优先级线程。（ 正确） 

4.程序开发者必须创建一个线程去管理内存的分配。（ 错误） 

5.一个线程在调用它的 start 方法，之前，该线程将一直处于出生期。（正确 ）

6.当调用一个正在进行线程的 stop()方法时，该线程便会进入休眠状态。（ 错误） //死亡

7.如果线程的 run 方法执行结束或抛出一个不能捕获的例外，线程便进入等待状态。（错误 ）  //线程死亡

8.一个线程可以调用 yield 方法使其他线程有机会运行。（ 正确） 
</code></pre><p>二、选择题 </p>
<pre><code>1.Java 语言中提供了一个▁C▁线程，自动回收动态分配的内存。 
A 异步 
B 消费者 
C 守护 
D 垃圾收集 

2.当▁A▁方法终止时，能使线程进入死亡状态。 
A run 
B setPrority 
C yield 
D sleep 

3.用▁B▁方法可以改变线程的优先级。 
A run 
B setPrority 
C yield 
D sleep 

4.线程通过▁C▁方法可以使具有相同优先级线程获得处理器。 
A run
B setPrority 
C yield 
D sleep 

5.线程通过▁D▁方法可以休眠一段时间，然后恢复运行。 
A run 
B setPrority 
C yield 
D sleep 

6.▁B▁方法使对象等待队列的第一个线程进入就绪状态。 
A run 
B notify 
C yield 
D sleep 

7.方法 resume( )负责重新开始▁D▁线程的执行。 
A 被 stop( )方法停止 
B 被 sleep( )方法停止 
C 被 wait( )方法停止 
D 被 suspend( )方法停止 

8.▁BCD▁方法可以用来暂时停止当前线程的运行。 
A stop( ) 
B sleep( ) 
C wait( ) 
D suspend() 
</code></pre><p>Java为什么要引入线程机制，线程、程序、进程之间的关系是怎样的。</p>
<p>答：线程可以彼此独立的执行，它是一种实现并发机制的有效手段，可以同时使用多个线程来完成不同的任务，<br>并且一般用户在使用多线程时并不考虑底层处理的细节。<br>程序是一段静态的代码，是软件执行的蓝本。进程是程序的一次动态执行过程，即是处于运行过程中的程序。<br>线程是比进程更小的程序执行单位，一个进程可以启动多个线程同时运行，不同线程之间可以共享相同的内<br>存区域和数据。多线程程序是运行时间后嗣可能出现在一个进程之内的、有一个以上线程同时运行的情况的程序。</p>
<p>Runnable接口包括哪些抽象方法？Thread类有哪些主要域和方法？</p>
<p>答：Runnable接口中仅有run()抽象方法。<br>Thread类主要域有：MAX_PRIORITY,MIN_PRIORITY,NORM_PRIORITY。<br>主要方法有start(),run(),sleep(),currentThread(),setPriority(),getPriority(),join()等。</p>
<p>创建线程有哪两种方式？试写出每种的具体的流程。比较两种创建方式的不同，哪个更优。</p>
<p>1—继承Thread类</p>
<pre><code>1)  定义类继承Thread类。
2)  覆盖Thread类中的run方法。
3)  创建Thread子类对象，即创建了线程对象。
4)  调用线程对象start方法：启动线程，调用run方法。
</code></pre><p>2—实现Runnable接口</p>
<pre><code>1）定义类，实现Runnable接口。
2）覆盖Runnable接口中的run方法。
3）通过Thread类建立线程对象。
4）将Runnable接口的子类对象作为实际参数传递给Thread类的构造方法中。
5）调用Thread类的start方法：开启线程，调用Runnable子类接口的run方法。
</code></pre><p>【区别】</p>
<pre><code>继承Thread: 线程代码存放Thread子类run方法中。
实现Runnable：线程代码存在接口的子类的run方法。
</code></pre><p>【实现方法的好处】</p>
<pre><code>1）避免了单继承的局限性
2）多个线程可以共享同一个接口子类的对象，非常适合多个相同线程来处理同一份资源。
</code></pre><h3 id="六、反射"><a href="#六、反射" class="headerlink" title="六、反射"></a>六、反射</h3><h3 id="垃圾回收机制：GC"><a href="#垃圾回收机制：GC" class="headerlink" title="垃圾回收机制：GC"></a>垃圾回收机制：GC</h3><h4 id="垃圾回收器的基本原理是什么？垃圾回收器可以马上回收内存吗？有什么办法主动通知虚拟机进行垃圾回收？"><a href="#垃圾回收器的基本原理是什么？垃圾回收器可以马上回收内存吗？有什么办法主动通知虚拟机进行垃圾回收？" class="headerlink" title="垃圾回收器的基本原理是什么？垃圾回收器可以马上回收内存吗？有什么办法主动通知虚拟机进行垃圾回收？"></a>垃圾回收器的基本原理是什么？垃圾回收器可以马上回收内存吗？有什么办法主动通知虚拟机进行垃圾回收？</h4><p>答：对于GC来说，当程序员创建对象时，GC就开始监控这个对象的地址、大小以及使用情况。通常，GC采用有向图的方式记录和管理堆中的所有对象。通过这种方式确定哪些对象是”可达的”，哪些对象是”不可达”的。即这些对象有没有被引用。当GC确定一些对象是不可达的时候，GC就有责任回收这些内存空间，当然程序员可以手动执行System.gc()，通知GC运行回收垃圾，但是GC不一定会执行。Java语言没有提供释放已分配内存的显示操作方法。</p>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 集合 </tag>
            
            <tag> 多线程 </tag>
            
            <tag> io </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo+Github搭建个人博客网站]]></title>
      <url>http://yoursite.com/2017/02/18/Hexo+Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<h3 id="一、下载安装node-js、git客户端"><a href="#一、下载安装node-js、git客户端" class="headerlink" title="一、下载安装node.js、git客户端"></a>一、下载安装node.js、git客户端</h3><h3 id="二、搭建本地博客"><a href="#二、搭建本地博客" class="headerlink" title="二、搭建本地博客"></a>二、搭建本地博客</h3><h3 id="安装hexo：npm-install-g-hexo"><a href="#安装hexo：npm-install-g-hexo" class="headerlink" title="安装hexo：npm install -g hexo"></a>安装hexo：npm install -g hexo</h3><h3 id="创建hexo文件夹，在文件夹下打开Git-Bash-Here"><a href="#创建hexo文件夹，在文件夹下打开Git-Bash-Here" class="headerlink" title="创建hexo文件夹，在文件夹下打开Git Bash Here"></a>创建hexo文件夹，在文件夹下打开Git Bash Here</h3><h3 id="初始化：-hexo-init"><a href="#初始化：-hexo-init" class="headerlink" title="初始化： hexo init"></a>初始化： hexo init</h3><h3 id="安装依赖包：npm-install"><a href="#安装依赖包：npm-install" class="headerlink" title="安装依赖包：npm install"></a>安装依赖包：npm install</h3><h3 id="编译生成静态网页：hexo-g"><a href="#编译生成静态网页：hexo-g" class="headerlink" title="编译生成静态网页：hexo g"></a>编译生成静态网页：hexo g</h3><h3 id="启动服务：hexo-s"><a href="#启动服务：hexo-s" class="headerlink" title="启动服务：hexo s"></a>启动服务：hexo s</h3><h3 id="进入http-localhost-4000查看效果"><a href="#进入http-localhost-4000查看效果" class="headerlink" title="进入http://localhost:4000查看效果"></a>进入<font><a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a></font>查看效果</h3><h3 id="三、将本地博客部署到github中"><a href="#三、将本地博客部署到github中" class="headerlink" title="三、将本地博客部署到github中"></a>三、将本地博客部署到github中</h3><h3 id="创建一个github账号-creat-new-repository，Repository-name和自己的用户名相同。比如我的用户名为kingrocy，那么Repository-name就填kingrocy-github-io"><a href="#创建一个github账号-creat-new-repository，Repository-name和自己的用户名相同。比如我的用户名为kingrocy，那么Repository-name就填kingrocy-github-io" class="headerlink" title="创建一个github账号,creat new repository，Repository name和自己的用户名相同。比如我的用户名为kingrocy，那么Repository name就填kingrocy.github.io"></a>创建一个github账号,creat new repository，Repository name和自己的用户名相同。比如我的用户名为kingrocy，那么Repository name就填kingrocy.github.io</h3><h3 id="修改本地博客的配置文件D：Hexo-config-yml"><a href="#修改本地博客的配置文件D：Hexo-config-yml" class="headerlink" title="修改本地博客的配置文件D：Hexo/_config.yml"></a>修改本地博客的配置文件D：Hexo/_config.yml</h3><p>  <img src="https://raw.githubusercontent.com/kingrocy/markdown-pic/master/image/1.png" alt=""></p>
<h3 id="配置github的SSH-Key"><a href="#配置github的SSH-Key" class="headerlink" title="配置github的SSH Key"></a>配置github的SSH Key</h3><p>1、在第一次使用Git时，你需要告诉你的协同开发者，你是谁以及你的邮箱，在你提交的时候，Git需要这两个信息。具体通过以下命令设置：</p>
<ul>
<li><p>git config –global user.name “kingrocy”</p>
</li>
<li><p>git config –global user.email “1097598984@qq.com”</p>
</li>
</ul>
<p>2、生成SSH密钥：ssh-keygen -t rsa -C “1097598984@qq.com”，在c:用户/Yun/.ssh下，得到两个文件id_rsa和id_rsa.pub<br><br>打开id_rsa.pub，复制全文。然后进入你的github，进入Settings/SSH and GPG keys/,然后点击new ssh keys，粘贴；</p>
<p>3、测试：ssh git@github.com<br><br>成功截图：<br><br>  <img src="https://raw.githubusercontent.com/kingrocy/markdown-pic/master/image/2.png" alt=""></p>
<p>4、安装hexo deployer：npm install hexo-deployer-git –save</p>
<p>5、部署：hexo d</p>
<p>6、成功截图：<br><br>  <img src="https://raw.githubusercontent.com/kingrocy/markdown-pic/master/image/3.png" alt=""></p>
<h3 id="注：以后修改博客，在本地先hexo-g编译，然后再hexo-d部署到github上"><a href="#注：以后修改博客，在本地先hexo-g编译，然后再hexo-d部署到github上" class="headerlink" title="注：以后修改博客，在本地先hexo g编译，然后再hexo d部署到github上"></a><font color="red">注：以后修改博客，在本地先hexo g编译，然后再hexo d部署到github上</font></h3>]]></content>
      
        <categories>
            
            <category> Hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux常用命令]]></title>
      <url>http://yoursite.com/2017/02/07/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<pre><code>ls　　   显示文件或目录

     -l       列出文件详细信息l(list)

     -a       列出当前目录下所有文件及目录，包括隐藏的a(all)


mkdir         创建目录

cd            切换目录

cp                拷贝

mv               移动或重命名

rm               删除文件

     -r            递归删除，可删除子目录及文件

     -f            强制删除

pwd              显示当前目录


ps              显示瞬间进程状态 ps -aux
                如：查看服务占用的端口号
                    ps -ef| grep mysql
                    ps -ef| grep java


head、tail    显示文件头、尾内容

tail -f catalina.out     查看启动日志启动信息


shutdown

     -r             关机重启

     -h             关机不重启

     now            立刻关机

halt            关机

reboot          重启
</code></pre>]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[常见数据库的端口及url]]></title>
      <url>http://yoursite.com/2016/12/25/%E5%B8%B8%E8%A7%81%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E7%AB%AF%E5%8F%A3%E5%8F%B7%E5%8F%8Aurl/</url>
      <content type="html"><![CDATA[<p>唉 学的越多感觉脑袋越来越不够用了。。数据库各个端口号和url常常搞混，现记录一下</p>
<p><strong>关系型数据库</strong></p>
<pre><code>1.Oracle
      port：默认端口号，1521       url:jdbc:oracle:thin:@localhost:1521:orcl


2.MySQL
     port：默认端口号，3306        url:jdbc:mysql://localhost:3306/database


3.SQL Server


     port：默认端口号，1433       url:jdbc:microsoft:sqlserver://localhost:1433;DatabaseName=mydb
</code></pre><p><strong>NOSQL数据库</strong></p>
<pre><code>1.MongoDB

     port：默认端口号，27017

2.Redis

     port：默认端口号，6379

3.memcached

     port：默认端口号，11211
</code></pre>]]></content>
      
        <categories>
            
            <category> 数据库 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[oracle数据库还原]]></title>
      <url>http://yoursite.com/2016/12/18/oracle%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%98%E5%8E%9F/</url>
      <content type="html"><![CDATA[<pre><code>1、create tablespace huayuoa datafile &apos;D:\work\oracle\oradata\orcl\huayuoa.dbf&apos;size 100M autoextend on maxsize unlimited;


2、sqlplus / as sysdba


3、创建ezoffice用户

    create user ezoffice identified by 13572468 default  tablespace users;

4、赋予ezoffice用户dba权限

    grant dba to ezoffice;


5、imp ezoffice/13572468@orcl file=D:\ezoffice_0215.dmp fromuser=ezoffice touser=ezoffice
</code></pre>]]></content>
      
        <categories>
            
            <category> sql </category>
            
        </categories>
        
        
        <tags>
            
            <tag> oracle </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[jackson的使用]]></title>
      <url>http://yoursite.com/2016/12/13/jackson%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>使用Jackson将json转换成List</p>
<p>写毕业设计的时候，做到将图书销售记录插入到数据库的时候，需要将售出的书籍传递给后台;</p>
<p>采用的方法是：</p>
<pre><code>1、在前台获取到了售出的书籍是数组类型的,将他转换成json字符串
    var data=$(&apos;#book_sale_grid&apos;).datagrid(&apos;getData&apos;);
            var booksale_records=JSON.stringify(data.rows);    

            （JSON.stringify有三个参数，其中第二个参数可以指定字符串的哪些key被转化为json的key）

2、后台使用jackson将此json字符串转换成List

//导入jackon的jar包(包不知道是maven啥时候下的)                                                    
    jackson-core-2.5.0.jar
    jackson-annotations-2.5.0.jar
    ackson-databind-2.5.0.jar

//使用jackon将前台传递的json字符串 转换成List

    //初始化pbjectMapper
    ObjectMapper objectMapper=new ObjectMapper();

    //自定义要转换的List类型
    CollectionType listType = objectMapper.getTypeFactory().constructCollectionType(ArrayList.class, BookSaleRecords.class);

    //将jaon 字符串 转成上面自定义的List类型
    List&lt;BookSaleRecords&gt;  list=objectMapper.readValue(booksalesrecords,listType);
注意：页面前台传回来的json字符串里面的&apos;键&apos;,在后台要有与之对应的实体类;
     json里面的&apos;键&apos;在实体类里一定要有与之对应的字段;
    而实体类里的字段可以在json里面没有，然后在json转成list的时候，这些字段就会被置为字段类型的默认值；
</code></pre>]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> jackson </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java小细节]]></title>
      <url>http://yoursite.com/2016/12/13/java%E5%B0%8F%E7%BB%86%E8%8A%82/</url>
      <content type="html"><![CDATA[<p>1.try-catch 代码块里面声明的变量 作用范围只在代码块中</p>
<p>2、字符串切割’[‘ ‘]’时需要加转义字符 \  补充 ‘.’和’|’ 也需要转义字符</p>
<p>3、如果在一个字符串中有多个分隔符 可以用”|”作为连字符</p>
<p>  如” acount=? and uu =? or n=? “  若要把三个都分隔出来可以用String.split(“and|or”);</p>
<p>4、请描述下JVM的内存模型？</p>
<pre><code>JVM的内存分为五个区域：方法区、虚拟机栈、本地方法栈、堆、程序计数器

堆和栈分别存储啥？  堆存储程序中new出来的对象;栈存储基本数据类型变量和对象的引用
</code></pre><p>5、请说出Object类型的方法？</p>
<pre><code>getClass()、clone()、toString()、equals()、hashCode()、wait()、notify()、
notifyAll()、finalize()
</code></pre>]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[jquery、js小知识]]></title>
      <url>http://yoursite.com/2016/11/13/jquery%E5%92%8Cjs/</url>
      <content type="html"><![CDATA[<p>jquery选择器</p>
<p>Jquery 选择器获取元素 时，对特殊字符转义需要加两个反斜杠</p>
<pre><code>如：var orgName=$(&quot;#whir\\$t3198_f4972&quot;).val();    
</code></pre><p>小问题：</p>
<pre><code>&lt;div style=&quot;WIDTH: 100%&quot; id=&quot;whir$t3198-whir$t3198_f4972&quot;&gt;
    &lt;div class=&quot;cls-ui cls-ui207 cls-ui-readonly cls-ui-1003131 cls-print cls-print207 cls-print-1003131&quot;&gt;信息公司通信运维部&lt;/div&gt;
&lt;/div&gt;

用js怎么更改 &apos;信息公司通信运维部&apos;    这些字？

$(&quot;#whir\\$t3198-whir\\$t3198_f4972&quot;).children().eq(0).text(&quot;市场开发部&quot;);
 这是错误的，，这样获取不到jquery对象

$(&quot;div[id=&apos;whir$t3198-whir$t3198_f4972&apos;]&quot;).children().eq(0).text(&quot;施工部&quot;); 
这样是对的
</code></pre><p>jquery ajax 在ie下问题:</p>
<pre><code>url后面不可携带参数，若携带参数，就会发生错误
正确做法
$.ajax({
        url:&apos;EzFLOWDealSearch!getId.action&apos;,
        data: {xmname:name},
        dataType: &apos;json&apos;,
        async:false, 
        success:function(data){    
            $(&quot;#xm_id&quot;).val(data.xm_id);
        },
        error:function(a,b,c){
            alert(a);
            alert(b);
            alert(c);
        }

    });
</code></pre><p><strong>小细节：</strong></p>
<pre><code>1、jqeury在对超链接进行操作时，需在代码的最后return false取消超链接的默认行为，不然前面写的代码不一定执行完页面就跳转了。


2、jquery中replaceAll无效  只有replace方法 才可替换指定的字符串



3、jquery中的attr和prop的区别
   attr和prop都是jquery中获取对象属性的方法

   区别：
       对于HTML元素本身就带有的固有属性，在处理时，使用prop方法。
     对于HTML元素我们自己自定义的DOM属性，在处理时，使用attr方法。        
</code></pre><p><strong>js常用小知识</strong></p>
<pre><code>1、js中判断字符串是否相等和indexOf()方法

    在js或jquery中，判断字符串是否相等没有equals()方法。。直接 ==即可;
    js中的==不是和java里面的==一样比较对象的内存地址;
    js中的==会根据类型和值来判断;若类型和值都相等，则相等;若类型不同，在js尝试类型转换，再比较;


    indexOf方法可返回某个指定的字符串值在字符串中首次出现的位置。
    若返回值&lt;0 则代表字符串中没有这个指定的字符串

2、js比较数字大小
        parseInt(num1)&lt;parseInt(num2)
        js中默认的类型是String类型，若不转换类型，则会出错

3、
    var arr = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;];
    typeof arr;   // return &quot;object&quot;
    arr  instanceof Array // true
    arr.constructor();  //[]

4、js去空格
    function String.prototype.Trim() { return this.replace(/(^/s*)|(/s*$)/g, &quot;&quot;); } // 去掉左右空格

    function String.prototype.Ltrim() { return this.replace(/(^/s*)/g, &quot;&quot;); } // 去掉左空格

    function String.prototype.Rtrim() { return this.replace(/(/s*$)/g, &quot;&quot;); }  // 去掉右空格

5、验证参数是否为数字

    function isNumber(n){
        return !isNaN(parseFloat(n)) &amp;&amp; isFinite(n);
    }

6、获取一个数字数组的最大值和最小值
    var  numbers = [5, 458 , 120 , -215 , 228 , 400 , 122205, -85411];
    var maxInNumbers = Math.max.apply(Math, numbers);
    var minInNumbers = Math.min.apply(Math, numbers);

7、清空一个数组
    var  numbers = [5, 458 , 120 , -215 , 228 , 400 , 122205, -85411];
    var maxInNumbers = Math.max.apply(Math, numbers);
    var minInNumbers = Math.min.apply(Math, numbers);
</code></pre><p><strong>jquery小技巧</strong>    </p>
<pre><code>1、选择或者不选页面上全部复选框    
    var flag = false; 
    $(&apos;a&apos;).click(function() {
        $(&quot;input[type=checkbox]&quot;).attr(&quot;checked&quot;,!flag);
        flag = !flag;
    });

2、在表单中禁用“回车键”

    $(&quot;#form&quot;).keypress(function(e) {
      if (e.which == 13) {
        return false;
      }
    });

3、清除所有的表单数据 （66666666666666）

    function clearForm(form) {
      $(&apos;:input&apos;, form).each(function() {
        var type = this.type;
        var tag = this.tagName.toLowerCase(); 
        if (type == &apos;text&apos; || type == &apos;password&apos; || tag == &apos;textarea&apos;)
          this.value = &quot;&quot;;
        else if (type == &apos;checkbox&apos; || type == &apos;radio&apos;)
          this.checked = false;
        else if (tag == &apos;select&apos;)
          this.selectedIndex = -1;
      });
    };

4、表单中按钮的禁用和启用

    禁用按钮：$(&quot;#somebutton&quot;).attr(&quot;disabled&quot;, true);

    启动按钮：$(&quot;#submit-button&quot;).removeAttr(&quot;disabled&quot;);    


5、高亮显示目前聚焦的输入框标示

    $(&quot;form :input&quot;).focus(function() {
      $(&quot;label[for=&apos;&quot; + this.id + &quot;&apos;]&quot;).addClass(&quot;labelfocus&quot;);
    }).blur(function() {
      $(&quot;label&quot;).removeClass(&quot;labelfocus&quot;);
    });

6、动态添加表单元素

    $(&apos;#password1&apos;).change(function() {
        $(&quot;#password1&quot;).append(&quot;&lt;input type=&apos;text&apos; name=&apos;password2&apos; id=&apos;password2&apos; /&gt;&quot;);
    });
</code></pre>]]></content>
      
        <categories>
            
            <category> js </category>
            
        </categories>
        
        
        <tags>
            
            <tag> jquery </tag>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[spring事务]]></title>
      <url>http://yoursite.com/2016/04/18/spring%E4%BA%8B%E5%8A%A1/</url>
      <content type="html"><![CDATA[<p>首先先介绍一下事务</p>
<p>事务就是多个动作被当作为一个独立的工作单元，这些动作要么都完成，要么都不完成</p>
<p>事务的四大特性(ACID)</p>
<pre><code>①、原子性：事务中包含的所有操作要么都成功，要么都失败回滚。
②、一致性：事务必须使数据库从一个一致性状态变换到另一个一致性状态。
            举例：A和B的账户的钱加起来一共5000，那么无论A和B怎么相互转账，转几次帐，事务结束后两个用户的钱加起来还得是5000；
③、隔离性：隔离性是指多个并发的事务互相之间不能影响
④、持久性：事务一旦提交，则对数据库的修改无法逆转。
</code></pre><p>在对数据库操作的过程中，可能出现以下几种情况：</p>
<p>1、脏读– 脏读又称无效数据的读出，是指在数据库访问中，事务T1将某一值修改，然后事务T2读取该值，此后T1因为某种原因撤销对该值的修改，这就导致了T2所读取到的数据是无效的。</p>
<p>2、不可重复读– 不可重复读是指在数据库访问中，一个事务范围内两个相同的查询却返回了不同数据。这是由于查询时系统中其他事务修改的提交而引起的。比如事务T1读取某一数据，事务T2读取并修改了该数据，T1为了对读取值进行检验而再次读取该数据，便得到了不同的结果。</p>
<p>3、幻读– 幻读是指当事务不是独立执行时发生的一种现象，例如第一个事务对一个表中的数据进行了修改，比如这种修改涉及到表中的”全部数据行”。同时，第二个事务也修改这个表中的数据，这种修改是向表中插入”一行新数据”。那么，以后就会发生操作第一个事务的用户发现表中还有没有修改的数据行，就好象发生了幻觉一样.一般解决幻读的方法是增加范围锁RangeS，锁定检锁范围为只读，这样就避免了幻读。</p>
<p>事务的传播行为:</p>
<pre><code>PROPAGATION_REQUIRED -- 支持当前事务，如果当前没有事务，就新建一个事务。这是最常见的选择。
PROPAGATION_SUPPORTS -- 支持当前事务，如果当前没有事务，就以非事务方式执行。
PROPAGATION_MANDATORY -- 支持当前事务，如果当前没有事务，就抛出异常。
PROPAGATION_REQUIRES_NEW -- 新建事务，如果当前存在事务，把当前事务挂起。
PROPAGATION_NOT_SUPPORTED -- 以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。
PROPAGATION_NEVER -- 以非事务方式执行，如果当前存在事务，则抛出异常。
PROPAGATION_NESTED -- 如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则进行与PROPAGATION_REQUIRED类似的操作。
</code></pre><p>隔离级别:</p>
<pre><code>ISOLATION_DEFAULT    使用后端数据库默认的隔离级别。
ISOLATION_READ_UNCOMMITTED    允许读取尚未提交的更改。可能导致脏读、幻影读或不可重复读。
ISOLATION_READ_COMMITTED    允许从已经提交的并发事务读取。可防止脏读，但幻影读和不可重复读仍可能会发生。
ISOLATION_REPEATABLE_READ    对相同字段的多次读取的结果是一致的，除非数据被当前事务本身改变。可防止脏读和不可重复读，但幻影读仍可能发生。
ISOLATION_SERIALIZABLE    完全服从ACID的隔离级别，确保不发生脏读、不可重复读和幻影读。这在所有隔离级别中也是最慢的，因为它通常是通过完全锁定当前事务所涉及的数据表来完成的。
</code></pre><p>小插曲：<br>2017/3/31<br>问题出现：</p>
<p>SSH框架下，spring管理事务；一般来说，我事务的切入点都是针对于service这个包;<br>今天写代码的时候，在util里面新建了一个HibernateUtil工具类，当某一Action处理业务较少时，就不需要针对此action新建它的dao、Impl、service了;<br>可以减少一些开发量;<br>但是，在我的一个action调用HibernateUtil工具类时，一直报无法获取session的错误。。。<br>经百度，，发现原来Hibernate4里面若 业务不是在事务控制之下，则无法获取session</p>
<p>问题解决：<br>        问题找到，现在考虑的就是讲util包里的HibernateUtil工具类也放入到Spring的事务管理下。。这个就很简单了</p>
<pre><code>&lt;!-- 3. 配置事务切入点, 再把事务属性和事务切入点关联起来 --&gt;
&lt;aop:config&gt;
    &lt;aop:pointcut expression=&quot;execution(* service.*.*(..)) || execution(* util.HibernateUtils.*(..)) &quot; id=&quot;txPointcut&quot;/&gt;
    &lt;aop:advisor advice-ref=&quot;txAdvice&quot; pointcut-ref=&quot;txPointcut&quot;/&gt;
&lt;/aop:config&gt;
</code></pre><p>2017-5-10 基于上面的小问题又出现了一个新的小问题</p>
<p>public class BookLoanAction  extends HibernateUtils<br>新建了一个类并继承了HibernateUtil，然后在这个类中进行数据库操作时，Hibernate一直报无法获取session的错；</p>
<p>本以为将HibernateUtil工具类也放入到Spring的事务管理下 在BookLoanAction 就可以直接对数据库进行操作了；<br>但是因为BookLoanAction是继承的HibernateUtil，而不是让HibernateUtil作为BookLoanAction的一个属性对数据库进行操作，<br>所以一直无法获取Session</p>
<pre><code>解决方法：在spring配置文件中增加BookLoanAction也为事务的切入点
&lt;aop:pointcut expression=&quot;execution(* service.*.*(..)) || execution(* util.HibernateUtils.*(..)) || execution(* action.BookLoanAction.*(..)) &quot; id=&quot;txPointcut&quot;/&gt;
</code></pre>]]></content>
      
        <categories>
            
            <category> spring </category>
            
        </categories>
        
        
        <tags>
            
            <tag> spring </tag>
            
            <tag> 事务 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[maven的安装配置]]></title>
      <url>http://yoursite.com/2016/01/10/maven%E7%9A%84%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p>1、下载并解压maven到本地  如D:\work\apache-maven-3.5.0</p>
<p>2、配置maven的环境变量</p>
<pre><code> ①、 新建系统变量M2_HOME  值就是本地的maven所在文件目录 即D:\work\apache-maven-3.5.0

②、 在path变量后面加上%M2_HOME%\bin;
</code></pre><p>进入cmd，输入mvn -v 验证maven是否安装成功</p>
<p>3、配置maven</p>
<pre><code>打开D:\work\apache-maven-3.5.0\conf\settings.xml

     1、maven配置阿里云的镜像

      &lt;mirrors&gt;
      &lt;!-- mirror
       | Specifies a repository mirror site to use instead of a given repository. The repository that
       | this mirror serves has an ID that matches the mirrorOf element of this mirror. IDs are used
       | for inheritance and direct lookup purposes, and must be unique across the set of mirrors.
       |
      &lt;mirror&gt;
        &lt;id&gt;mirrorId&lt;/id&gt;
        &lt;mirrorOf&gt;repositoryId&lt;/mirrorOf&gt;
        &lt;name&gt;Human Readable Name for this Mirror.&lt;/name&gt;
        &lt;url&gt;http://my.repository.com/repo/path&lt;/url&gt;
      &lt;/mirror&gt;
       --&gt;
       &lt;mirror&gt;
        &lt;id&gt;alimaven&lt;/id&gt;
        &lt;name&gt;aliyun maven&lt;/name&gt;
        &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;
        &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;       
      &lt;/mirror&gt;
    &lt;/mirrors&gt;

    2、maven配置本地仓库

      &lt;localRepository&gt;D:/work/maven/repository&lt;/localRepository&gt;

    3、maven配置jdk版本
        &lt;profile&gt;
            &lt;id&gt;jdk-1.7&lt;/id&gt;
            &lt;activation&gt;
                &lt;activeByDefault&gt;true&lt;/activeByDefault&gt;
                &lt;jdk&gt;1.7&lt;/jdk&gt;
            &lt;/activation&gt;
            &lt;properties&gt;
                &lt;maven.compiler.source&gt;1.7&lt;/maven.compiler.source&gt;
                &lt;maven.compiler.target&gt;1.7&lt;/maven.compiler.target&gt;
                &lt;maven.compiler.compilerVersion&gt;1.7&lt;/maven.compiler.compilerVersion&gt;
            &lt;/properties&gt;
        &lt;/profile&gt;  
</code></pre>]]></content>
      
        <categories>
            
            <category> maven </category>
            
        </categories>
        
        
        <tags>
            
            <tag> maven </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
